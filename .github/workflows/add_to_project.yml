name: Auto Add Issue to Project

on:
  issues:
    types: [opened, edited]

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add to Project (best-effort)
        uses: actions/add-to-project@v0.5.0
        id: add-project
        with:
          project-url: https://github.com/orgs/aptma-sHEWTeam/projects/3
          github-token: ${{ secrets.ORG_PROJECTS_TOKEN }}

      - name: Debug - Show add-project outputs
        run: |
          echo "Item ID: ${{ steps.add-project.outputs.itemId }}"
          echo "All outputs: ${{ toJson(steps.add-project.outputs) }}"

      - name: Extract Issue Fields (robust)
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const raw = context.payload.issue.body || '';
            const text = raw.replace(/\r\n/g, '\n'); // normalize newline
            console.log('=== Issue Body (normalized) ===\n' + text + '\n=== /Issue Body ===');

            function findValue(labelAliases) {
              // 1) 正規表現で "(###)? Label [:：]? \n <value>" を探す
              for (const alias of labelAliases) {
                const pattern = new RegExp(String.raw`(?:^|\n)\s*(?:###\s*)?${alias}\s*[:：]?\s*(?:\n+|\s+)([^\n]+)`, 'i');
                const m = text.match(pattern);
                if (m && m[1]) return m[1].trim();
              }
              // 2) 行スキャン: ラベル行の次の非空行
              const lines = text.split('\n');
              const norm = s => (s||'').trim().toLowerCase();
              for (let i = 0; i < lines.length; i++) {
                const l = norm(lines[i]).replace(/^#+\s*/, ''); // 先頭の ### を除去
                for (const alias of labelAliases) {
                  const a = norm(alias);
                  // 同一行に値があるケース: "Label: value"
                  if (l.startsWith(a)) {
                    const after = lines[i].split(/[:：]/).slice(1).join(':').trim();
                    if (after) return after;
                    // 次行が値
                    let j=i+1; while(j<lines.length && lines[j].trim().length===0) j++;
                    if (j<lines.length) return lines[j].trim();
                  }
                }
              }
              return '';
            }

            const out = {
              role: findValue(['Role']),
              team: findValue(['ProgramTeam','Team']),
              priority: findValue(['Priority']),
              component: findValue(['Component','Component (任意)']),
              size: findValue(['Size']),
              estimate: findValue(['Estimate','Estimate (時間)']),
              start_date: findValue(['Start date','Start date (YYYY-MM-DD)']),
              due_date: findValue(['End date','Due date','End date (YYYY-MM-DD)'])
            };

            console.log('Extracted:', out);
            for (const [k,v] of Object.entries(out)) core.setOutput(k, v);

      - name: Debug - Show extracted fields
        run: |
          echo "Role: ${{ steps.extract.outputs.role }}"
          echo "Team: ${{ steps.extract.outputs.team }}"
          echo "Priority: ${{ steps.extract.outputs.priority }}"
          echo "Component: ${{ steps.extract.outputs.component }}"
          echo "Size: ${{ steps.extract.outputs.size }}"
          echo "Estimate: ${{ steps.extract.outputs.estimate }}"
          echo "Start Date: ${{ steps.extract.outputs.start_date }}"
          echo "Due Date: ${{ steps.extract.outputs.due_date }}"

      - name: Get Project Data (find or add)
        uses: actions/github-script@v7
        id: project-data
        with:
          github-token: ${{ secrets.ORG_PROJECTS_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const org = 'aptma-sHEWTeam';
            const projectNumber = 3;

            const pageQuery = `
              query($org: String!, $number: Int!, $first: Int!, $after: String) {
                organization(login: $org) {
                  projectV2(number: $number) {
                    id
                    items(first: $first, after: $after) {
                      nodes { id content { ... on Issue { id number } } }
                      pageInfo { hasNextPage endCursor }
                    }
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2Field { id name dataType }
                        ... on ProjectV2SingleSelectField { id name dataType options { id name } }
                      }
                    }
                  }
                }
              }
            `;

            const addMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `;

            async function findItemAndFields() {
              let after = null; let project = null;
              while (true) {
                const res = await github.graphql(pageQuery, { org, number: projectNumber, first: 100, after });
                project = res.organization.projectV2;
                const hit = project.items.nodes.find(n => n.content && n.content.number === issue.number);
                if (hit) return { project, itemId: hit.id };
                const pi = project.items.pageInfo;
                if (!pi.hasNextPage) return { project, itemId: null };
                after = pi.endCursor;
              }
            }

            // 1) 探す
            let { project, itemId } = await findItemAndFields();
            const projectId = project.id;

            // 2) 無ければ追加して再検索
            if (!itemId) {
              console.log('Item not found, adding via GraphQL...');
              try {
                const addRes = await github.graphql(addMutation, { projectId, contentId: issue.node_id });
                console.log('Added item id:', addRes.addProjectV2ItemById.item.id);
              } catch (e) {
                console.log('Add mutation error (may already exist):', e.message);
              }
              // 少し待機してから再検索
              await new Promise(r => setTimeout(r, 1500));
              ({ project, itemId } = await findItemAndFields());
              if (!itemId) throw new Error('Could not find or add issue to project');
            }

            // 出力
            core.setOutput('item_id', itemId);
            core.setOutput('project_id', projectId);

            const fields = {}; const fieldOptions = {};
            for (const f of project.fields.nodes) {
              fields[f.name] = f.id;
              if (f.options) {
                const map = {}; for (const o of f.options) map[o.name] = o.id; fieldOptions[f.name] = map;
              }
            }
            core.setOutput('fields', JSON.stringify(fields));
            core.setOutput('field_options', JSON.stringify(fieldOptions));

      - name: Set Project Fields
        uses: actions/github-script@v7
        if: always()
        env:
          PROJECT_ID: ${{ steps.project-data.outputs.project_id }}
          ITEM_ID: ${{ steps.project-data.outputs.item_id }}
          FIELDS: ${{ steps.project-data.outputs.fields }}
          FIELD_OPTIONS: ${{ steps.project-data.outputs.field_options }}
          ROLE: ${{ steps.extract.outputs.role }}
          TEAM: ${{ steps.extract.outputs.team }}
          PRIORITY: ${{ steps.extract.outputs.priority }}
          COMPONENT: ${{ steps.extract.outputs.component }}
          SIZE: ${{ steps.extract.outputs.size }}
          ESTIMATE: ${{ steps.extract.outputs.estimate }}
          START_DATE: ${{ steps.extract.outputs.start_date }}
          DUE_DATE: ${{ steps.extract.outputs.due_date }}
        with:
          github-token: ${{ secrets.ORG_PROJECTS_TOKEN }}
          script: |
            if (!process.env.ITEM_ID || !process.env.PROJECT_ID) {
              console.log('[Diag] item_id/project_id 未取得。前段の Get Project Data を確認');
              console.log('[Diag] ITEM_ID=', process.env.ITEM_ID);
              console.log('[Diag] PROJECT_ID=', process.env.PROJECT_ID);
              return;
            }
            if (!process.env.FIELDS || !process.env.FIELD_OPTIONS) {
              console.log('[Diag] FIELDS or FIELD_OPTIONS 未取得');
              console.log('[Diag] FIELDS=', process.env.FIELDS);
              console.log('[Diag] FIELD_OPTIONS=', process.env.FIELD_OPTIONS);
              return;
            }

            const projectId = process.env.PROJECT_ID;
            const itemId = process.env.ITEM_ID;
            const fields = JSON.parse(process.env.FIELDS);
            const fieldOptions = JSON.parse(process.env.FIELD_OPTIONS);
            console.log('FIELDS JSON:', JSON.stringify(fields, null, 2));
            console.log('FIELD_OPTIONS JSON:', JSON.stringify(fieldOptions, null, 2));

            const SKIP = new Set(['', '_No response_', 'No response', 'Choose an option', 'None', 'No date', 'Enter number...']);

            const fieldIdByName = new Map(Object.entries(fields).map(([k,v])=>[k.trim().toLowerCase(), v]));
            const optionIdByFieldName = new Map(Object.entries(fieldOptions).map(([fname, opts])=>[fname.trim().toLowerCase(), new Map(Object.entries(opts||{}).map(([n,id])=>[n.trim().toLowerCase(), id]))]));

            function getFieldId(fieldName){ const id = fieldIdByName.get(fieldName.trim().toLowerCase()); if(!id) console.log(`Field not found: ${fieldName}`); return id; }
            function getOptionId(fieldName, value){ const opts = optionIdByFieldName.get(fieldName.trim().toLowerCase()); if(!opts) { console.log(`Options not found for ${fieldName}`); return null; } const id = opts.get(value.trim().toLowerCase()); if(!id) console.log(`Option not found: ${fieldName} -> ${value}. Available=`, Array.from(opts.keys())); return id; }

            // 入力値→プロジェクト側表示名へのマッピング
            function mapValue(fieldName, value){
              const v = (value||'').trim();
              const lc = v.toLowerCase();
              const maps = {
                'role': {
                  'planner':'プランナー','programmer':'プログラマー','designer':'デザイナー','qa':'Q＆A','q&a':'Q＆A','q＆a':'Q＆A'
                },
                'priority': {
                  'high':'P0','p0':'P0','medium':'P1','mid':'P1','p1':'P1','low':'P2','p2':'P2'
                },
                'component': {
                  'level':'Stage','stages':'Stage','stage':'Stage'
                },
                'size': {
                  'xs':'Low','s':'Low','small':'Low','low':'Low','m':'Mid','mid':'Mid','medium':'Mid','l':'High','xl':'High','high':'High'
                },
                'programteam': {
                  'a':'A','b':'B','c':'C'
                }
              };
              const key = fieldName.trim().toLowerCase();
              if (maps[key] && maps[key][lc]) return maps[key][lc];
              return v; // マッピング不要ならそのまま
            }

            let intended = 0, changed = 0;

            async function setSingleSelect(fieldName, rawValue) {
              if (SKIP.has(rawValue)) { console.log(`Skip ${fieldName}: '${rawValue}'`); return; }
              const value = mapValue(fieldName, rawValue);
              intended++;
              const fieldId = getFieldId(fieldName); if (!fieldId) return;
              const optId = getOptionId(fieldName, value); if (!optId) return;
              await github.graphql(`mutation { updateProjectV2ItemFieldValue(input: { projectId: "${projectId}", itemId: "${itemId}", fieldId: "${fieldId}", value: { singleSelectOptionId: "${optId}" } }) { projectV2Item { id } } }`);
              changed++;
              console.log(`? Set ${fieldName}: ${value}`);
            }

            async function setDate(fieldName, value) {
              if (SKIP.has(value)) { console.log(`Skip ${fieldName}: '${value}'`); return; }
              intended++;
              if (!/^\d{4}-\d{2}-\d{2}$/.test(value)) { console.log(`Skip ${fieldName}: invalid date '${value}'`); return; }
              const fieldId = getFieldId(fieldName); if (!fieldId) return;
              await github.graphql(`mutation { updateProjectV2ItemFieldValue(input: { projectId: "${projectId}", itemId: "${itemId}", fieldId: "${fieldId}", value: { date: "${value}" } }) { projectV2Item { id } } }`);
              changed++;
              console.log(`? Set ${fieldName}: ${value}`);
            }

            async function setNumber(fieldName, value) {
              if (SKIP.has(value)) { console.log(`Skip ${fieldName}: '${value}'`); return; }
              intended++;
              const n = parseFloat(value); if (isNaN(n)) { console.log(`Skip ${fieldName}: NaN '${value}'`); return; }
              const fieldId = getFieldId(fieldName); if (!fieldId) return;
              await github.graphql(`mutation { updateProjectV2ItemFieldValue(input: { projectId: "${projectId}", itemId: "${itemId}", fieldId: "${fieldId}", value: { number: ${n} } }) { projectV2Item { id } } }`);
              changed++;
              console.log(`? Set ${fieldName}: ${n}`);
            }

            await setSingleSelect('Role', process.env.ROLE);
            await setSingleSelect('ProgramTeam', process.env.TEAM);
            await setSingleSelect('Priority', process.env.PRIORITY);
            await setSingleSelect('Component', process.env.COMPONENT);
            await setSingleSelect('Size', process.env.SIZE);
            await setNumber('Estimate', process.env.ESTIMATE);
            await setDate('Start date', process.env.START_DATE);
            await setDate('End date', process.env.DUE_DATE);

            console.log(`Summary: intended=${intended}, changed=${changed}`);
            if (intended > 0 && changed === 0) {
              console.log('No fields were updated. Check field names/options and token scopes.');
            }
