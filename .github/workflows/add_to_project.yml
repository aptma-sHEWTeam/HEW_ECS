name: Auto Add Issue to Project

on:
  issues:
    types: [opened]

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add to Project
        uses: actions/add-to-project@v0.5.0
        id: add-project
        with:
          project-url: https://github.com/orgs/aptma-sHEWTeam/projects/3
          github-token: ${{ secrets.ORG_PROJECTS_TOKEN }}

      - name: Debug - Show add-project outputs
        run: |
          echo "Item ID: ${{ steps.add-project.outputs.itemId }}"
          echo "All outputs: ${{ toJson(steps.add-project.outputs) }}"

      - name: Extract Issue Fields
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body || '';
            
            console.log('=== Issue Body ===');
            console.log(issueBody);
            console.log('==================');
            
            // フィールド抽出用の正規表現（複数パターン対応）
            const roleMatch = issueBody.match(/### Role\\s*\\n+\\s*(.+?)(?:\\n|$)/i);
            const teamMatch = issueBody.match(/### (?:Team|ProgramTeam)\\s*\\n+\\s*(.+?)(?:\\n|$)/i);
            const priorityMatch = issueBody.match(/### Priority\\s*\\n+\\s*(.+?)(?:\\n|$)/i);
            const startMatch = issueBody.match(/### Start date[^\\n]*\\s*\\n+\\s*(.+?)(?:\\n|$)/i);
            const dueMatch = issueBody.match(/### (?:End date|Due date)[^\\n]*\\s*\\n+\\s*(.+?)(?:\\n|$)/i);
            const componentMatch = issueBody.match(/### Component[^\\n]*\\s*\\n+\\s*(.+?)(?:\\n|$)/i);
            const estimateMatch = issueBody.match(/### Estimate[^\\n]*\\s*\\n+\\s*(.+?)(?:\\n|$)/i);
            const sizeMatch = issueBody.match(/### Size[^\\n]*\\s*\\n+\\s*(.+?)(?:\\n|$)/i);
            
            const role = roleMatch ? roleMatch[1].trim() : '';
            const team = teamMatch ? teamMatch[1].trim() : '';
            const priority = priorityMatch ? priorityMatch[1].trim() : '';
            const startDate = startMatch ? startMatch[1].trim() : '';
            const dueDate = dueMatch ? dueMatch[1].trim() : '';
            const component = componentMatch ? componentMatch[1].trim() : '';
            const estimate = estimateMatch ? estimateMatch[1].trim() : '';
            const size = sizeMatch ? sizeMatch[1].trim() : '';
            
            console.log('=== Extracted Fields ===');
            console.log('Role:', role);
            console.log('Team:', team);
            console.log('Priority:', priority);
            console.log('Start Date:', startDate);
            console.log('Due Date:', dueDate);
            console.log('Component:', component);
            console.log('Estimate:', estimate);
            console.log('Size:', size);
            console.log('========================');
            
            core.setOutput('role', role);
            core.setOutput('team', team);
            core.setOutput('priority', priority);
            core.setOutput('start_date', startDate);
            core.setOutput('due_date', dueDate);
            core.setOutput('component', component);
            core.setOutput('estimate', estimate);
            core.setOutput('size', size);

      - name: Debug - Show extracted fields
        run: |
          echo "Role: ${{ steps.extract.outputs.role }}"
          echo "Team: ${{ steps.extract.outputs.team }}"
          echo "Priority: ${{ steps.extract.outputs.priority }}"
          echo "Start Date: ${{ steps.extract.outputs.start_date }}"
          echo "Due Date: ${{ steps.extract.outputs.due_date }}"
          echo "Component: ${{ steps.extract.outputs.component }}"
          echo "Estimate: ${{ steps.extract.outputs.estimate }}"
          echo "Size: ${{ steps.extract.outputs.size }}"

      - name: Get Project Data
        uses: actions/github-script@v7
        id: project-data
        with:
          github-token: ${{ secrets.ORG_PROJECTS_TOKEN }}
          script: |
            const issue = context.payload.issue;
            
            // プロジェクトとアイテムIDを取得
            const query = `
              query($org: String!, $number: Int!) {
                organization(login: $org) {
                  projectV2(number: $number) {
                    id
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                          }
                        }
                      }
                    }
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                          dataType
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          dataType
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const result = await github.graphql(query, {
              org: 'aptma-sHEWTeam',
              number: 3
            });
            
            const project = result.organization.projectV2;
            const projectId = project.id;
            
            // 追加されたアイテムを見つける
            const item = project.items.nodes.find(
              node => node.content && node.content.number === issue.number
            );
            
            if (!item) {
              console.log('Item not found in project yet, retrying...');
              // 少し待ってから再試行
              await new Promise(resolve => setTimeout(resolve, 2000));
              
              const retryResult = await github.graphql(query, {
                org: 'aptma-sHEWTeam',
                number: 3
              });
              
              const retryItem = retryResult.organization.projectV2.items.nodes.find(
                node => node.content && node.content.number === issue.number
              );
              
              if (!retryItem) {
                throw new Error('Could not find issue in project');
              }
              
              core.setOutput('item_id', retryItem.id);
              core.setOutput('project_id', projectId);
            } else {
              core.setOutput('item_id', item.id);
              core.setOutput('project_id', projectId);
            }
            
            // フィールド情報を保存
            const fields = {};
            const fieldOptions = {};
            
            for (const field of project.fields.nodes) {
              fields[field.name] = field.id;
              if (field.options) {
                fieldOptions[field.name] = {};
                for (const option of field.options) {
                  fieldOptions[field.name][option.name] = option.id;
                }
              }
            }
            
            core.setOutput('fields', JSON.stringify(fields));
            core.setOutput('field_options', JSON.stringify(fieldOptions));
            
            console.log('Project ID:', projectId);
            console.log('Item ID:', item ? item.id : 'not found');
            console.log('Fields:', JSON.stringify(fields, null, 2));
            console.log('Field Options:', JSON.stringify(fieldOptions, null, 2));

      - name: Set Project Fields
        uses: actions/github-script@v7
        if: steps.project-data.outputs.item_id
        env:
          PROJECT_ID: ${{ steps.project-data.outputs.project_id }}
          ITEM_ID: ${{ steps.project-data.outputs.item_id }}
          FIELDS: ${{ steps.project-data.outputs.fields }}
          FIELD_OPTIONS: ${{ steps.project-data.outputs.field_options }}
          ROLE: ${{ steps.extract.outputs.role }}
          TEAM: ${{ steps.extract.outputs.team }}
          PRIORITY: ${{ steps.extract.outputs.priority }}
          START_DATE: ${{ steps.extract.outputs.start_date }}
          DUE_DATE: ${{ steps.extract.outputs.due_date }}
          COMPONENT: ${{ steps.extract.outputs.component }}
          ESTIMATE: ${{ steps.extract.outputs.estimate }}
          SIZE: ${{ steps.extract.outputs.size }}
        with:
          github-token: ${{ secrets.ORG_PROJECTS_TOKEN }}
          script: |
            const projectId = process.env.PROJECT_ID;
            const itemId = process.env.ITEM_ID;
            const fields = JSON.parse(process.env.FIELDS);
            const fieldOptions = JSON.parse(process.env.FIELD_OPTIONS);
            
            console.log('Setting fields for item:', itemId);
            
            // Single Select フィールドを設定するヘルパー関数
            async function setSingleSelectField(fieldName, value) {
              if (!value || value === '_No response_' || value === 'Choose an option') {
                console.log(`Skipping ${fieldName}: no value`);
                return;
              }
              
              const fieldId = fields[fieldName];
              const options = fieldOptions[fieldName];
              
              if (!fieldId) {
                console.log(`Warning: Field "${fieldName}" not found in project`);
                return;
              }
              
              if (!options || !options[value]) {
                console.log(`Warning: Option "${value}" not found for field "${fieldName}"`);
                console.log(`Available options:`, Object.keys(options || {}));
                return;
              }
              
              const optionId = options[value];
              
              try {
                await github.graphql(`
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${projectId}"
                      itemId: "${itemId}"
                      fieldId: "${fieldId}"
                      value: { singleSelectOptionId: "${optionId}" }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `);
                console.log(`? Set ${fieldName}: ${value}`);
              } catch (error) {
                console.error(`? Failed to set ${fieldName}:`, error.message);
              }
            }
            
            // Date フィールドを設定するヘルパー関数
            async function setDateField(fieldName, value) {
              if (!value || value === '_No response_' || value === 'No date') {
                console.log(`Skipping ${fieldName}: no value`);
                return;
              }
              
              // YYYY-MM-DD 形式チェック
              if (!/^\d{4}-\d{2}-\d{2}$/.test(value)) {
                console.log(`Skipping ${fieldName}: invalid date format "${value}"`);
                return;
              }
              
              const fieldId = fields[fieldName];
              
              if (!fieldId) {
                console.log(`Warning: Field "${fieldName}" not found in project`);
                return;
              }
              
              try {
                await github.graphql(`
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${projectId}"
                      itemId: "${itemId}"
                      fieldId: "${fieldId}"
                      value: { date: "${value}" }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `);
                console.log(`? Set ${fieldName}: ${value}`);
              } catch (error) {
                console.error(`? Failed to set ${fieldName}:`, error.message);
              }
            }
            
            // Number フィールドを設定するヘルパー関数
            async function setNumberField(fieldName, value) {
              if (!value || value === '_No response_' || value === 'Enter number...') {
                console.log(`Skipping ${fieldName}: no value`);
                return;
              }
              
              const numValue = parseFloat(value);
              if (isNaN(numValue)) {
                console.log(`Skipping ${fieldName}: invalid number "${value}"`);
                return;
              }
              
              const fieldId = fields[fieldName];
              
              if (!fieldId) {
                console.log(`Warning: Field "${fieldName}" not found in project`);
                return;
              }
              
              try {
                await github.graphql(`
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${projectId}"
                      itemId: "${itemId}"
                      fieldId: "${fieldId}"
                      value: { number: ${numValue} }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `);
                console.log(`? Set ${fieldName}: ${numValue}`);
              } catch (error) {
                console.error(`? Failed to set ${fieldName}:`, error.message);
              }
            }
            
            // Text フィールドを設定するヘルパー関数
            async function setTextField(fieldName, value) {
              if (!value || value === '_No response_') {
                console.log(`Skipping ${fieldName}: no value`);
                return;
              }
              
              const fieldId = fields[fieldName];
              
              if (!fieldId) {
                console.log(`Warning: Field "${fieldName}" not found in project`);
                return;
              }
              
              try {
                await github.graphql(`
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${projectId}"
                      itemId: "${itemId}"
                      fieldId: "${fieldId}"
                      value: { text: "${value.replace(/"/g, '\\"')}" }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `);
                console.log(`? Set ${fieldName}: ${value}`);
              } catch (error) {
                console.error(`? Failed to set ${fieldName}:`, error.message);
              }
            }
            
            // 各フィールドを設定
            await setSingleSelectField('Role', process.env.ROLE);
            await setSingleSelectField('ProgramTeam', process.env.TEAM);
            await setSingleSelectField('Priority', process.env.PRIORITY);
            await setSingleSelectField('Component', process.env.COMPONENT);
            await setSingleSelectField('Size', process.env.SIZE);
            await setDateField('Start date', process.env.START_DATE);
            await setDateField('End date', process.env.DUE_DATE);
            await setNumberField('Estimate', process.env.ESTIMATE);
            
            console.log('? All fields processed');
